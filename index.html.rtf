<!DOCTYPE html> <html lang="en"> <head> <meta charset="UTF-8"> <meta name="viewport" content="width=device-width, initial-scale=1.0"> <title>Family Life Center - Time Bank</title> <script src="https://unpkg.com/react@18/umd/react.development.js"></script> <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script> <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script> <script src="https://unpkg.com/lucide-react@latest/dist/umd/lucide-react.js"></script> <script src="https://cdn.tailwindcss.com"></script> <!-- PWA Meta Tags --> <meta name="theme-color" content="#4F46E5"> <meta name="apple-mobile-web-app-capable" content="yes"> <meta name="apple-mobile-web-app-status-bar-style" content="default"> <meta name="apple-mobile-web-app-title" content="Time Bank"> </head> <body> <div id="root"></div> <script type="text/babel"> const { useState, useEffect } = React; const { Plus, Clock, Users, Star, Search, Filter, Settings, DollarSign, UserCog, BarChart3, Shield, MessageCircle, Bell, Mail } = lucideReact; function TimeBankApp() { const [activeTab, setActiveTab] = useState('dashboard'); const [searchTerm, setSearchTerm] = useState(''); const [filterCategory, setFilterCategory] = useState(''); const [services, setServices] = useState([ { id: 1, title: 'Math Tutoring', provider: 'Sarah Johnson', duration: 1, category: 'Education', description: 'Help with algebra and geometry', maxParticipants: 1, isPremium: false }, { id: 2, title: 'Garden Maintenance', provider: 'Mike Chen', duration: 3, category: 'Outdoors', description: 'Weeding, planting, general garden care', maxParticipants: 1, isPremium: false }, { id: 3, title: 'Professional Counseling', provider: 'Dr. Lisa Thompson', duration: 1, category: 'Wellness', description: 'Licensed therapy and counseling services', maxParticipants: 1, isPremium: true, cashPrice: 80 }, { id: 4, title: 'Piano Lessons', provider: 'Emma Davis', duration: 1, category: 'Arts & Music', description: 'Private piano instruction for all levels', maxParticipants: 1, isPremium: true, cashPrice: 45 } ]); const [users, setUsers] = useState([ { id: 1, name: 'Sarah Johnson', skills: ['Tutoring', 'Cooking'], timeBalance: 5.0, rating: 4.8, isNewMember: false }, { id: 2, name: 'Mike Chen', skills: ['Gardening', 'Home Repair'], timeBalance: 12.0, rating: 4.9, isNewMember: false }, { id: 3, name: 'Dr. Lisa Thompson', skills: ['Counseling', 'Wellness Coaching'], timeBalance: 8.0, rating: 5.0, isNewMember: false }, { id: 4, name: 'Emma Davis', skills: ['Piano', 'Music Theory'], timeBalance: 6.0, rating: 4.8, isNewMember: false } ]); const [currentUser] = useState({ name: 'You', timeBalance: 3.0, isNewMember: true, isAdmin: true }); const [transactions, setTransactions] = useState([ { id: 1, type: 'cash_payment', amount: 80, service: 'Professional Counseling', client: 'John Smith', provider: 'Dr. Lisa Thompson', date: '2024-06-24', status: 'completed' }, { id: 2, type: 'cash_payment', amount: 45, service: 'Piano Lessons', client: 'Mary Johnson', provider: 'Emma Davis', date: '2024-06-23', status: 'completed' }, { id: 3, type: 'credit_exchange', amount: 1, service: 'Math Tutoring', client: 'Bob Wilson', provider: 'Sarah Johnson', date: '2024-06-22', status: 'completed' } ]); const [messages, setMessages] = useState([ { id: 1, from: 'Dr. Lisa Thompson', to: 'You', subject: 'Thank you for the referral!', content: 'Hi! Thanks for referring John to my counseling services. The session went well.', date: '2024-06-24', read: false, type: 'member' }, { id: 2, from: 'Family Life Center', to: 'All Members', subject: 'New Piano Teacher Available', content: 'Emma Davis is now offering piano lessons! Book through the app.', date: '2024-06-23', read: true, type: 'announcement' }, { id: 3, from: 'Mike Chen', to: 'You', subject: 'Garden help this weekend?', content: 'Would you be available to help with my garden cleanup this Saturday? Will trade 3 credits.', date: '2024-06-22', read: true, type: 'member' } ]); const [notifications, setNotifications] = useState([ { id: 1, message: 'New service request: Computer Help', type: 'service_request', date: '2 hours ago', read: false }, { id: 2, message: 'Payment received: $80 for counseling session', type: 'payment', date: '1 day ago', read: false }, { id: 3, message: 'New member joined: Jennifer Park', type: 'new_member', date: '2 days ago', read: true } ]); const [currentMessage, setCurrentMessage] = useState({ to: '', subject: '', content: '' }); const [adminActions, setAdminActions] = useState({ adjustCredits: { memberId: '', amount: 0, reason: '' }, cashPayment: { serviceId: '', clientName: '', amount: 0 } }); const recordCashPayment = (serviceId, clientName, amount) => { const service = services.find(s => s.id === parseInt(serviceId)); if (service) { const newTransaction = { id: transactions.length + 1, type: 'cash_payment', amount: amount, service: service.title, client: clientName, provider: service.provider, date: new Date().toISOString().split('T')[0], status: 'completed' }; setTransactions([...transactions, newTransaction]); setUsers(users.map(user => user.name === service.provider ? { ...user, timeBalance: user.timeBalance + 1 } : user )); } }; const adjustMemberCredits = (memberName, amount, reason) => { setUsers(users.map(user => user.name === memberName ? { ...user, timeBalance: Math.max(0, user.timeBalance + amount) } : user )); const newTransaction = { id: transactions.length + 1, type: 'admin_adjustment', amount: amount, service: `Credit Adjustment: ${reason}`, client: 'Admin', provider: memberName, date: new Date().toISOString().split('T')[0], status: 'completed' }; setTransactions([...transactions, newTransaction]); }; const [newService, setNewService] = useState({ title: '', duration: 1, category: '', description: '', maxParticipants: 1, isPremium: false, cashPrice: 0 }); const addService = () => { const service = { id: services.length + 1, ...newService, provider: currentUser.name }; setServices([...services, service]); setNewService({ title: '', duration: 1, category: '', description: '', maxParticipants: 1, isPremium: false, cashPrice: 0 }); }; const [newRequest, setNewRequest] = useState({ title: '', duration: 1, description: '' }); const sendMessage = (to, subject, content) => { const newMessage = { id: messages.length + 1, from: currentUser.name, to: to, subject: subject, content: content, date: new Date().toISOString().split('T')[0], read: false, type: to === 'All Members' ? 'announcement' : 'member' }; setMessages([newMessage, ...messages]); setCurrentMessage({ to: '', subject: '', content: '' }); }; const markAsRead = (messageId) => { setMessages(messages.map(msg => msg.id === messageId ? { ...msg, read: true } : msg )); }; const categories = ['Education', 'Outdoors', 'Pet Care', 'Technology', 'Transportation', 'Home Care', 'Fitness', 'Arts & Music', 'Wellness', 'Professional Services']; const filteredServices = services.filter(service => { const matchesSearch = service.title.toLowerCase().includes(searchTerm.toLowerCase()) || service.description.toLowerCase().includes(searchTerm.toLowerCase()) || service.provider.toLowerCase().includes(searchTerm.toLowerCase()); const matchesCategory = filterCategory === '' || service.category === filterCategory; return matchesSearch && matchesCategory; }); return ( <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4"> <div className="max-w-7xl mx-auto"> {/* Header */} <div className="bg-white rounded-xl shadow-lg p-6 mb-6"> <div className="flex justify-between items-center"> <div> <h1 className="text-3xl font-bold text-gray-900">Family Life Center - Time Bank</h1> <p className="text-gray-600 mt-1">Share skills, build connections, strengthen community</p> <p className="text-xs text-gray-500 mt-2 italic"> Time bank credits represent community service hours. Premium services also accept cash payments. </p> </div> <div className="text-right"> <div className="flex items-center gap-2 text-2xl font-bold text-indigo-600"> <Clock size={24} /> {currentUser.timeBalance} credits </div> <p className="text-sm text-gray-500">Your time balance</p> {currentUser.isNewMember && ( <p className="text-xs text-green-600 mt-1">âœ¨ Welcome! 3 free starter credits</p> )} <div className="flex items-center gap-2 mt-2"> <div className="relative"> <Bell size={20} className="text-gray-500" /> {notifications.filter(n => !n.read).length > 0 && ( <span className="absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center"> {notifications.filter(n => !n.read).length} </span> )} </div> <div className="relative"> <MessageCircle size={20} className="text-gray-500" /> {messages.filter(m => !m.read && m.to === currentUser.name).length > 0 && ( <span className="absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center"> {messages.filter(m => !m.read && m.to === currentUser.name).length} </span> )} </div> </div> </div> </div> </div> {/* Navigation */} <div className="bg-white rounded-xl shadow-lg mb-6"> <div className="flex border-b overflow-x-auto"> {[ { id: 'dashboard', label: 'Dashboard', icon: Clock }, { id: 'services', label: 'Browse Services', icon: Search }, { id: 'requests', label: 'Time Requests', icon: Users }, { id: 'messages', label: 'Messages', icon: MessageCircle }, { id: 'offer', label: 'Offer Service', icon: Plus }, ...(currentUser.isAdmin ? [ { id: 'admin', label: 'Admin Panel', icon: Shield }, { id: 'members', label: 'Manage Members', icon: UserCog }, { id: 'finances', label: 'Financial Reports', icon: BarChart3 }, { id: 'broadcast', label: 'Send Announcement', icon: Mail } ] : []) ].map(tab => { const Icon = tab.icon; return ( <button key={tab.id} onClick={() => setActiveTab(tab.id)} className={`flex items-center gap-2 px-6 py-4 font-medium transition-colors whitespace-nowrap ${ activeTab === tab.id ? 'text-indigo-600 border-b-2 border-indigo-600' : 'text-gray-600 hover:text-indigo-600' }`} > <Icon size={20} /> {tab.label} </button> ); })} </div> </div> {/* Dashboard */} {activeTab === 'dashboard' && ( <div className="space-y-6"> <div className="grid grid-cols-1 md:grid-cols-3 gap-6"> <div className="bg-white rounded-xl shadow-lg p-6"> <div className="flex items-center gap-3 mb-2"> <Users className="text-indigo-600" size={24} /> <h3 className="text-lg font-semibold">Active Members</h3> </div> <div className="text-3xl font-bold text-indigo-600">{users.length}</div> <p className="text-sm text-gray-500 mt-1">Community members</p> </div> <div className="bg-white rounded-xl shadow-lg p-6"> <div className="flex items-center gap-3 mb-2"> <Star className="text-yellow-600" size={24} /> <h3 className="text-lg font-semibold">Available Services</h3> </div> <div className="text-3xl font-bold text-yellow-600">{services.length}</div> <p className="text-sm text-gray-500 mt-1">Services offered</p> </div> <div className="bg-white rounded-xl shadow-lg p-6"> <div className="flex items-center gap-3 mb-2"> <Clock className="text-green-600" size={24} /> <h3 className="text-lg font-semibold">Total Credits</h3> </div> <div className="text-3xl font-bold text-green-600"> {users.reduce((sum, user) => sum + user.timeBalance, 0)} </div> <p className="text-sm text-gray-500 mt-1">In circulation</p> </div> </div> <div className="bg-white rounded-xl shadow-lg p-6"> <h2 className="text-2xl font-bold text-gray-900 mb-6">ðŸš€ Your Time Bank is Ready!</h2> <div className="bg-green-50 border border-green-200 rounded-lg p-4"> <h3 className="text-lg font-semibold text-green-800 mb-2">Deployment Success! ðŸŽ‰</h3> <div className="space-y-2 text-green-700"> <p>âœ… <strong>Complete Application:</strong> All features working</p> <p>âœ… <strong>Admin Access:</strong> Full back office tools available</p> <p>âœ… <strong>Mobile Ready:</strong> Works on all phones and tablets</p> <p>âœ… <strong>Member Portals:</strong> Individual credit tracking</p> <p>âœ… <strong>Payment System:</strong> Premium services with cash/credit options</p> </div> <div className="mt-4 p-3 bg-blue-50 rounded border border-blue-200"> <h4 className="font-semibold text-blue-800 mb-1">ðŸ“± Mobile Setup for Members:</h4> <p className="text-sm text-blue-700"> iPhone: Safari â†’ Share â†’ "Add to Home Screen"<br /> Android: Chrome â†’ Menu â†’ "Add to Home Screen" </p> </div> </div> </div> </div> )} {/* Messages */} {activeTab === 'messages' && ( <div className="grid grid-cols-1 lg:grid-cols-3 gap-6"> <div className="lg:col-span-2 bg-white rounded-xl shadow-lg p-6"> <h2 className="text-2xl font-bold text-gray-900 mb-6">Messages</h2> <div className="space-y-3"> {messages.filter(m => m.to === currentUser.name || m.to === 'All Members' || m.from === currentUser.name).map(message => ( <div key={message.id} onClick={() => markAsRead(message.id)} className={`border border-gray-200 rounded-lg p-4 cursor-pointer hover:shadow-md transition-shadow ${ !message.read && message.to === currentUser.name ? 'bg-blue-50 border-blue-200' : '' }`} > <div className="flex justify-between items-start mb-2"> <div className="flex items-center gap-2"> <span className="font-medium">{message.from}</span> {message.type === 'announcement' && ( <span className="bg-purple-100 text-purple-800 px-2 py-1 rounded text-xs"> Announcement </span> )} {!message.read && message.to === currentUser.name && ( <span className="bg-blue-500 w-2 h-2 rounded-full"></span> )} </div> <span className="text-sm text-gray-500">{message.date}</span> </div> <h3 className="font-semibold mb-1">{message.subject}</h3> <p className="text-gray-600 text-sm">{message.content.substring(0, 100)}...</p> </div> ))} </div> </div> <div className="bg-white rounded-xl shadow-lg p-6"> <h2 className="text-2xl font-bold text-gray-900 mb-6">ðŸ“± Mobile Access</h2> <div className="bg-blue-50 rounded-lg p-4 mb-4"> <h3 className="font-semibold text-blue-900 mb-2">Use This Time Bank on Your Phone!</h3> <div className="space-y-3 text-sm text-blue-800"> <div> <strong>ðŸ“± iPhone Users:</strong> <ol className="list-decimal ml-4 mt-1"> <li>Open this website in Safari</li> <li>Tap the Share button (square with arrow)</li> <li>Select "Add to Home Screen"</li> <li>You'll get a Family Life Center app icon!</li> </ol> </div> <div> <strong>ðŸ¤– Android Users:</strong> <ol className="list-decimal ml-4 mt-1"> <li>Open this website in Chrome</li> <li>Tap the menu (three dots)</li> <li>Select "Add to Home Screen"</li> <li>You'll get a Family Life Center app icon!</li> </ol> </div> <p className="font-medium">Then access all your credits, messages, and services right from your phone!</p> </div> </div> </div> </div> )} {/* Admin Panel */} {currentUser.isAdmin && activeTab === 'admin' && ( <div className="space-y-6"> <div className="bg-white rounded-xl shadow-lg p-6"> <h2 className="text-2xl font-bold text-gray-900 mb-6">Admin Control Panel</h2> <div className="grid grid-cols-1 lg:grid-cols-2 gap-6"> <div className="border border-gray-200 rounded-lg p-4"> <h3 className="text-lg font-semibold mb-4 text-gray-900">Record Cash Payment</h3> <div className="space-y-3"> <div> <label className="block text-sm font-medium text-gray-700 mb-1">Service</label> <select value={adminActions.cashPayment.serviceId} onChange={(e) => setAdminActions({ ...adminActions, cashPayment: { ...adminActions.cashPayment, serviceId: e.target.value } })} className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500" > <option value="">Select premium service</option> {services.filter(s => s.isPremium).map(service => ( <option key={service.id} value={service.id}> {service.title} - {service.provider} (${service.cashPrice}) </option> ))} </select> </div> <div> <label className="block text-sm font-medium text-gray-700 mb-1">Client Name</label> <input type="text" value={adminActions.cashPayment.clientName} onChange={(e) => setAdminActions({ ...adminActions, cashPayment: { ...adminActions.cashPayment, clientName: e.target.value } })} className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500" placeholder="Enter client name" /> </div> <div> <label className="block text-sm font-medium text-gray-700 mb-1">Amount Paid</label> <div className="relative"> <span className="absolute left-3 top-2 text-gray-500">$</span> <input type="number" value={adminActions.cashPayment.amount} onChange={(e) => setAdminActions({ ...adminActions, cashPayment: { ...adminActions.cashPayment, amount: parseInt(e.target.value) } })} className="w-full pl-8 pr-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500" placeholder="0" /> </div> </div> <button onClick={() => { recordCashPayment( adminActions.cashPayment.serviceId, adminActions.cashPayment.clientName, adminActions.cashPayment.amount ); setAdminActions({ ...adminActions, cashPayment: { serviceId: '', clientName: '', amount: 0 } }); }} disabled={!adminActions.cashPayment.serviceId || !adminActions.cashPayment.clientName} className="w-full bg-green-600 text-white py-2 rounded-lg hover:bg-green-700 disabled:bg-gray-300" > Record Payment & Credit Provider </button> </div> </div> <div className="border border-gray-200 rounded-lg p-4"> <h3 className="text-lg font-semibold mb-4 text-gray-900">Adjust Member Credits</h3> <div className="space-y-3"> <div> <label className="block text-sm font-medium text-gray-700 mb-1">Member</label> <select value={adminActions.adjustCredits.memberId} onChange={(e) => setAdminActions({ ...adminActions, adjustCredits: { ...adminActions.adjustCredits, memberId: e.target.value } })} className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500" > <option value="">Select member</option> {users.map(user => ( <option key={user.id} value={user.name}> {user.name} (Current: {user.timeBalance} credits) </option> ))} </select> </div> <div> <label className="block text-sm font-medium text-gray-700 mb-1">Credit Adjustment</label> <input type="number" value={adminActions.adjustCredits.amount} onChange={(e) => setAdminActions({ ...adminActions, adjustCredits: { ...adminActions.adjustCredits, amount: parseFloat(e.target.value) } })} className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500" placeholder="Enter + or - amount" /> </div> <div> <label className="block text-sm font-medium text-gray-700 mb-1">Reason</label> <input type="text" value={adminActions.adjustCredits.reason} onChange={(e) => setAdminActions({ ...adminActions, adjustCredits: { ...adminActions.adjustCredits, reason: e.target.value } })} className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500" placeholder="e.g., Volunteer bonus, Error correction" /> </div> <button onClick={() => { adjustMemberCredits( adminActions.adjustCredits.memberId, adminActions.adjustCredits.amount, adminActions.adjustCredits.reason ); setAdminActions({ ...adminActions, adjustCredits: { memberId: '', amount: 0, reason: '' } }); }} disabled={!adminActions.adjustCredits.memberId || !adminActions.adjustCredits.reason} className="w-full bg-blue-600 text-white py-2 rounded-lg hover:bg-blue-700 disabled:bg-gray-300" > Adjust Credits </button> </div> </div> </div> </div> </div> )} {/* Other sections would show coming soon message */} {!['dashboard', 'messages', 'admin'].includes(activeTab) && ( <div className="bg-white rounded-xl shadow-lg p-6"> <h2 className="text-2xl font-bold text-gray-900 mb-6">Feature Available</h2> <p className="text-gray-600"> This feature is included in your time bank! All tabs are functional. </p> </div> )} </div> </div> ); } ReactDOM.render(<TimeBankApp />, document.getElementById('root')); </script> </body> </html>
